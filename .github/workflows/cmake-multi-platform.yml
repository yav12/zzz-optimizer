# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        qt:  [ "6.5.2" ]

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    - name: Setup Qt
      uses: subosito/qt-action@v2
      with:
        qt-version: ${{ matrix.qt }}

    - name: Install OS packages (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ninja-build cmake pkg-config libgl1-mesa-dev

    - name: Install OS packages (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install -y ninja cmake --no-progress
      shell: cmd

    - name: Configure (CMake + Ninja)
      run: cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: cmake --build build --config Release -- -j

    - name: Run tests (if any)
      run: |
        if [ -f build/CTestTestfile.cmake ]; then
          ctest --test-dir build --output-on-failure
        else
          echo "No CTest tests configured"
        fi
      shell: bash

    - name: Upload binary artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: zzz-optimizer-${{ matrix.os }}
        path: |
          build/zzz-optimizer
          build/Release/zzz-optimizer.exe
